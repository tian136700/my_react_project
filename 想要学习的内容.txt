需要学习的内容（结合当前项目）

1. React 基础
- JSX 与组件：函数组件（如 `CommonAside`、`CommonHeader`、`Main`），props 与 state 的区别与使用。
- React.createElement：结合图标动态渲染的用法（`React.createElement(Icons[name])`）。
- 条件与列表渲染：`map` 生成菜单项、`children` 子菜单判断。

2. React Router v6
- 路由配置与使用：`createBrowserRouter(routes)`、`element` 字段渲染组件。
- 嵌套路由：`Main` 作为父路由，子路由 `home/mall/user/other/pageOne/pageTwo`。
- 重定向：`<Navigate to={'home'} replace />`。
- `Outlet`：在父级中渲染子路由内容（当前代码已引入）。

3. Ant Design 组件库
- Layout：`Layout`、`Sider`、`Header`、`Content`、`Footer` 的组合与布局思想。
- Menu：`items` 数据驱动、`theme`、`mode`、`defaultSelectedKeys`。
- Breadcrumb：面包屑的 `items` 用法。
- Button 与 Icons：按钮与图标的组合，`MenuUnfoldOutlined` 等。
- 主题 Token：`theme.useToken()` 获取 `colorBgContainer` 等主题变量并用于样式。

4. 图标动态渲染
- 从 `@ant-design/icons` 批量导入为对象：`import * as Icons from '@ant-design/icons'`。
- 自定义工具函数：`const iconToElement = (name) => React.createElement(Icons[name])`。
- 在菜单映射中使用：`icon: iconToElement(item.icon)`。
- 命名规范：`MenuConfig.map(item => ...)`，避免把 `item` 命名成 `icon` 造成语义混淆。

5. 配置驱动的菜单
- `src/config/index.js`：集中管理菜单/路由元信息（`path/name/label/icon/children`）。
- 在 `CommonAside` 中通过 `map` 将配置转为 AntD Menu 所需的 `items` 结构。

6. Redux Toolkit（全局状态）
- Slice 基础：`createSlice({ name, initialState, reducers })`。
- 侧边栏折叠状态：`tab` slice，`isCollapsed` 与 `collapseMenu` 切换。
- 组件中使用：`useSelector(state => state.tab.isCollapsed)` 读取，`dispatch(collapseMenu())` 修改。
- 后续目标：在 `CommonHeader` 的按钮中触发折叠，在 `CommonAside` 的 `Sider` 上读取该状态以控制展开/收起。

7. 样式与布局
- 内联样式对象写法与场景（快速试验、基于主题 token 的样式）。
- Flex 盒模型：标题区域水平/垂直居中实现。
- 视觉细节：按钮绝对定位，保持“贴着侧边栏右缘”的交互。

8. 代码规范与可维护性
- ESLint 常见规则：`import/first`、未使用变量提示、命名清晰（`item`/`menuItem`）。
- 模块化：按功能拆分 `components/`、`pages/`、`router/`、`store/`、`config/`。

9. 项目运行与依赖
- 依赖：`antd`、`@ant-design/icons`、`react-router-dom@6`、`@reduxjs/toolkit`。
- 基本命令：`npm install`、`npm start`。

---
实践任务建议（可与老师讨论）
- 在 `CommonHeader` 的按钮里 `dispatch(collapseMenu())`，在 `CommonAside` 的 `Sider` 用 `isCollapsed` 控制 `collapsed` 属性，实现全局折叠。
- 用 `MenuConfig` 再补充一个子菜单，练习 `children` 的映射与路由联动。
- 将面包屑 `Breadcrumb` 改为从当前路由动态生成。
